{"version":3,"file":"markedLazy-83287264.js","sources":["../src/config/highlighter.ts","../src/utils/markedLazy.ts"],"sourcesContent":["/**\n * The MIT License (MIT)\n *\n * Copyright (c) egoist <0x142857@gmail.com> (https://egoistian.com)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\nconst WORD_REGEXP =\n  /[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|\\w+/;\nconst LEFT_ANGLE_REGEXP = /</;\nconst LINE_COMMENT_REGEXP = /(?:^|\\s)\\/\\/(.+?)$/gm;\nconst BLOCK_COMMENT_REGEXP = /\\/\\*([\\S\\s]*?)\\*\\//gm;\nconst REGEXP = new RegExp(\n  `(${WORD_REGEXP.source}|${LEFT_ANGLE_REGEXP.source})|((?:${LINE_COMMENT_REGEXP.source})|(?:${BLOCK_COMMENT_REGEXP.source}))`,\n  'gmi'\n);\n\nconst COLORS = [\n  '23AC69',\n  '91C132',\n  'F19726',\n  'E8552D',\n  '1AAB8E',\n  'E1147F',\n  '2980C1',\n  '1BA1E6',\n  '9FA0A0',\n  'F19726',\n  'E30B20',\n  'E30B20',\n  'A3338B',\n];\nconst cache: Record<string, string> = {};\n\nexport const defaultHighlighter = (input: string): string => {\n  let index = 0;\n\n  return input.replace(REGEXP, (_match, word: string, comment: string) => {\n    if (comment) return `<span style=\"color: slategray\">${comment}</span>`;\n    if (word === '<') return '&lt;';\n\n    let color: string;\n\n    if (cache[word]) color = cache[word];\n    else {\n      color = COLORS[index];\n      cache[word] = color;\n    }\n\n    const out = `<span style=\"color: #${color}\">${word}</span>`;\n\n    index = ++index % COLORS.length;\n\n    return out;\n  });\n};\n","import { marked } from 'marked';\nimport { defaultHighlighter } from '../config';\nimport type { WalineTexRenderer } from '../typings';\n\ntype TexToken = {\n  type: string;\n  raw: string;\n  text: string;\n  block: boolean;\n};\n\nconst texTokens: TexToken[] = [];\n\nconst inlineMathStart = /\\B\\$\\S(?:.*?\\S)?\\$\\B/;\nconst inlineMathReg = /^\\$(\\S(?:.*?\\S)?)\\$\\B/;\nconst blockMathReg = /^\\s{0,3}\\$\\$((?:.|\\n.)+?)\\n?\\$\\$/;\n\nexport const markedTexExtensions: marked.TokenizerExtension[] = [\n  {\n    name: 'blockMath',\n    level: 'block',\n    tokenizer(src: string): TexToken | void {\n      const cap = blockMathReg.exec(src);\n\n      if (cap !== null) {\n        const token = {\n          type: 'html',\n          raw: cap[0],\n          text: cap[1],\n          block: true,\n        };\n\n        texTokens.push(token);\n\n        return token;\n      }\n    },\n  },\n\n  {\n    name: 'inlineMath',\n    level: 'inline',\n    start(src: string): number {\n      return src.search(inlineMathStart);\n    },\n    tokenizer(src: string): TexToken | void {\n      const cap = inlineMathReg.exec(src);\n\n      if (cap !== null) {\n        const token = {\n          type: 'html',\n          raw: cap[0],\n          text: cap[1],\n          block: false,\n        };\n\n        texTokens.push(token);\n\n        return token;\n      }\n    },\n  },\n];\n\nconst katexLazy = (blockMode: boolean, tex: string): Promise<string> =>\n  import('./katexLazy')\n    .then(({ KaTeX }) => KaTeX(blockMode, tex))\n    .catch(\n      () =>\n        '<span class=\"wl-tex\">The KaTeX renderer failed to load, but you can still comment.</span>'\n    );\n\nexport const getParseMarkdown = (\n  texRenderer: WalineTexRenderer\n): ((content: string) => Promise<string>) => {\n  marked.use({\n    breaks: true,\n    headerIds: false,\n    smartLists: true,\n    smartypants: true,\n    highlight: (code, lang) => (lang ? defaultHighlighter(code) : undefined),\n    extensions: markedTexExtensions,\n  });\n\n  return async (content) => {\n    const tokens = marked.Lexer.lex(content);\n\n    for (const t of texTokens) {\n      t.text = await texRenderer(t.block, t.text);\n    }\n    texTokens.length = 0;\n\n    if (marked.defaults.walkTokens) {\n      marked.walkTokens(tokens, marked.defaults.walkTokens);\n    }\n\n    return marked.Parser.parse(tokens);\n  };\n};\n\nexport const MD = getParseMarkdown(katexLazy);\n"],"names":["REGEXP","RegExp","source","concat","LINE_COMMENT_REGEXP","COLORS","cache","texTokens","inlineMathStart","inlineMathReg","blockMathReg","markedTexExtensions","name","level","tokenizer","src","cap","exec","token","type","raw","text","block","push","start","search","getParseMarkdown","texRenderer","marked","use","breaks","headerIds","smartLists","smartypants","highlight","code","lang","input","index","replace","_match","word","comment","color","out","length","defaultHighlighter","undefined","extensions","async","tokens","Lexer","lex","content","t","defaults","walkTokens","Parser","parse","MD","blockMode","tex","import","then","_ref","KaTeX","catch"],"mappings":"wBAyBA,MAKMA,EAAS,IAAIC,kBAJjB,wFAKgBC,OADH,KAAAC,OAHW,IAIoBD,OAAeE,UAAAA,OAHjC,uBAGqDF,OADlE,SAAAC,OADc,uBAEuFD,OAClH,MAAA,OAGIG,EAAS,CACb,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UAEIC,EAAgC,yooCCvCtC,MAAMC,EAAwB,GAExBC,EAAkB,uBAClBC,EAAgB,wBAChBC,EAAe,mCAERC,EAAmD,CAC9D,CACEC,KAAM,YACNC,MAAO,QACPC,UAAUC,GACR,MAAMC,EAAMN,EAAaO,KAAKF,GAE9B,GAAY,OAARC,EAAc,CAChB,MAAME,EAAQ,CACZC,KAAM,OACNC,IAAKJ,EAAI,GACTK,KAAML,EAAI,GACVM,OAAO,GAKT,OAFAf,EAAUgB,KAAKL,GAERA,KAKb,CACEN,KAAM,aACNC,MAAO,SACPW,MAAMT,GACGA,EAAIU,OAAOjB,GAEpBM,UAAUC,GACR,MAAMC,EAAMP,EAAcQ,KAAKF,GAE/B,GAAY,OAARC,EAAc,CAChB,MAAME,EAAQ,CACZC,KAAM,OACNC,IAAKJ,EAAI,GACTK,KAAML,EAAI,GACVM,OAAO,GAKT,OAFAf,EAAUgB,KAAKL,GAERA,MAcFQ,EACXC,IAEAC,EAAOC,IAAI,CACTC,QAAQ,EACRC,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,UAAW,CAACC,EAAMC,IAAUA,ED5BGC,CAAAA,IACjC,IAAIC,EAAQ,EAEZ,OAAOD,EAAME,QAAQvC,GAAQ,CAACwC,EAAQC,EAAcC,KAClD,GAAIA,EAAS,MAAA,kCAAAvC,OAAyCuC,EAAzC,WACb,GAAa,MAATD,EAAc,MAAO,OAEzB,IAAIE,EAEArC,EAAMmC,GAAOE,EAAQrC,EAAMmC,IAE7BE,EAAQtC,EAAOiC,GACfhC,EAAMmC,GAAQE,GAGhB,MAAMC,EAAG,wBAAAzC,OAA2BwC,EAA3B,MAAAxC,OAAqCsC,EAA9C,WAIA,OAFAH,IAAUA,EAAQjC,EAAOwC,OAElBD,MCS4BE,CAAmBX,QAAQY,EAC9DC,WAAYrC,IAGPsC,MAAAA,IACL,MAAMC,EAAStB,EAAOuB,MAAMC,IAAIC,GAEhC,IAAK,MAAMC,KAAK/C,EACd+C,EAAEjC,WAAaM,EAAY2B,EAAEhC,MAAOgC,EAAEjC,MAQxC,OANAd,EAAUsC,OAAS,EAEfjB,EAAO2B,SAASC,YAClB5B,EAAO4B,WAAWN,EAAQtB,EAAO2B,SAASC,YAGrC5B,EAAO6B,OAAOC,MAAMR,KAIlBS,EAAKjC,GApCA,CAACkC,EAAoBC,IACrCC,OAAO,2BACJC,MAAKC,IAAA,IAACC,MAAEA,GAAHD,EAAA,OAAeC,EAAML,EAAWC,MACrCK,OACC,IACE"}